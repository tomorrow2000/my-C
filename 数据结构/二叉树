#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
typedef int BTDataType;
typedef struct BTNode
{
  BTDataType data;
  struct BTNode *left;
  struct BTNode *right;
}BTNode;
typedef BTNode* QDataType;
// 链式结构：表示队列 
typedef struct QListNode
{
  struct QListNode* _next;
  QDataType _data;
}QNode;
// 队列的结构 
typedef struct Queue
{
  QNode* _front;
  QNode* _rear;
}Queue;
// 初始化队列 
void QueueInit(Queue* q)
{
  assert(q);
  q->_front = q->_rear = NULL;
}
// 队尾入队列 
void QueuePush(Queue* q, QDataType data)
{
  assert(q);
  QNode *newnode = (QNode *)malloc(sizeof(QNode));
  newnode->_data = data,newnode->_next = NULL;
  if(!q->_front)
  {
    q->_front = q->_rear = newnode;
  }else
  {
    q->_rear->_next = newnode;
    q->_rear = q->_rear->_next;
  }
}
// 队头出队列 
void QueuePop(Queue* q)
{
  assert(q);
  if(!q->_front->_next)
  {
    free(q->_front);
    q->_front = q->_rear = NULL;
  }else
  {
    QNode *next = q->_front->_next;
    free(q->_front);
    q->_front = next;
  }
}
// 获取队列头部元素 
QDataType QueueFront(Queue* q)
{
  assert(q);
  return q->_front->_data;
}
// 获取队列队尾元素 
QDataType QueueBack(Queue* q)
{
  assert(q);
  return q->_rear->_data;
}
// 获取队列中有效元素个数 
int QueueSize(Queue* q)
{
    assert(q);
    int count = 0;
    if(q->_front)
    {
        ++count;
    }
    return count;
}
// 检测队列是否为空，如果为空返回非零结果，如果非空返回0 
int QueueEmpty(Queue* q)
{
  assert(q);
  if(q->_front)
    return 0;
  else
    return 1;
}
// 销毁队列 

void QueueDestroy(Queue* q)
{
  if(!q->_front)
  {
    return;
  }
  assert(q);
  while(QueueEmpty(q))
  {
    if(!q->_front->_next)
    {
      free(q->_front);
      q->_front = q->_rear = NULL;
    }else
    {
      QNode *next = q->_front->_next;
      free(q->_front);
      q->_front = next;
    }
  }
}
// 前序 中序 后序遍历
void PrevOrder(BTNode* root)
{
  if(!root)
  {
    return;
  }
  printf("%d ",root->data);
  PrevOrder(root->left);
  PrevOrder(root->right);
}
void InOrder(BTNode* root)
{
  if(!root)
  {
    return;
  }
  InOrder(root->left);
  printf("%d ",root->data);
  InOrder(root->right);
}
void PostOrder(BTNode* root)
{
  if(!root)
  {
    return;
  }
  PostOrder(root->left);
  PostOrder(root->right);
  printf("%d ",root->data);
}
// 节点个数
int TreeSize(BTNode* root)
{
  return !root? 0:1+TreeSize(root->left)+TreeSize(root->right);
}
// 叶子节点的个数
int TreeLeafSize(BTNode* root)
{
  if(!root)
  {
    return 0;
  }
  if(root->left==NULL && root->right==NULL)
  {
    return 1;
  }
  return TreeLeafSize(root->left)+TreeLeafSize(root->right);
}
// 层序遍历
void LevelOrder(BTNode* root)
{
  Queue queue;
  QueueInit(&queue);
  if(root)
  {
    QueuePush(&queue,root);
  }
  while(!QueueEmpty(&queue))
  {
    printf("%d ",queue._front->_data->data);
    if(queue._front->_data->left)
    {
      QueuePush(&queue,queue._front->_data->left);
    }
        if(queue._front->_data->right)
    {
      QueuePush(&queue,queue._front->_data->right);
    }
    QueuePop(&queue);
  }
  printf("\n");
  QueueDestroy(&queue);
}

int main()
{
  BTNode BTNode10={10,NULL,NULL};
  BTNode BTNode9={9,NULL,NULL};
  BTNode BTNode8={8,NULL,NULL};
  BTNode BTNode7={7,NULL,NULL};
  BTNode BTNode6={6,NULL,NULL};
  BTNode BTNode5={5,NULL,&BTNode10};
  BTNode BTNode4={4,&BTNode8,&BTNode9};
  BTNode BTNode3={3,&BTNode6,&BTNode7};
  BTNode BTNode2={2,&BTNode4,&BTNode5};
  BTNode BTNode1={1,&BTNode2,&BTNode3};
  PrevOrder(&BTNode1);
  printf("\r\n");
  InOrder(&BTNode1);
  printf("\r\n");
  PostOrder(&BTNode1);
  printf("\r\n");
  LevelOrder(&BTNode1);
  printf("%d\r\n",TreeLeafSize(&BTNode1));
  return 0;
}
