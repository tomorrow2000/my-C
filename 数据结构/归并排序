#include <stdio.h>
#include <stdlib.h>
//递归
void _mergesort(int *a,int *b,int left,int right)
{
    if(left>=right)
        return;
    int mid = (left+right)/2;
    _mergesort(a,b,left,mid);
    _mergesort(a,b,mid+1,right);
    int start1 = left,end1 = mid,
    start2 = mid+1,end2 = right,
    i = left;
    while(start1<=end1 && start2<=end2)
    {
        if(a[start1]<a[start2])
        {
            b[i++] = a[start1++];
        }else
        {
            b[i++] = a[start2++];
        }
    }
    while(start2<=end2)
    {
        b[i++] = a[start2++];
    }
    while(start1<=end1)
    {
        b[i++] = a[start1++];
    }
    for(i = left;i<=right;++i)
    {
        a[i]= b[i];
    }
}
//非递归
void MergeSortNonR(int* a, int n)
{
    if(!a&&(n == 0||n == 1))
        return;
    int *temp = (int *)malloc(n*sizeof(int));
    int i = 0,j = 0,gap = 1,start1 = 0,end1 = 0,start2 = 0,end2 = 0;
    while(gap<n)
    {
        int index = 0;
        for(i=0;i<n;i+=2*gap)
        {
            start1 = i,end1 = start1+gap-1,start2 = i+gap,end2 = start2+gap-1;
            if(start2>n-1)
            {
                break;
            }
            if(end2>n-1)
            {
                end2 = n-1;
            }
            while(start1<=end1&&start2<=end2)
            {
                if(a[start1]<a[start2])
                {
                    temp[index++]=a[start1++];
                }else
                {
                    temp[index++]=a[start2++];
                }
            }
            while(start1<=end1)
            {
                temp[index++]=a[start1++];
            }
            while(start2<=end2)
            {
                temp[index++]=a[start2++];
            }
            for(j=i;j<=end2;++j)
            {
                a[j]=temp[j];
            }
        }
        gap = 2*gap;
    }
}

void mergesort(int *a, int n)
{
    if(!a&&(n == 0||n == 1))
        return;
    int *temp = (int *)malloc(n*sizeof(int));
    _mergesort(a,temp,0,n-1);
    free(temp);
}

int main()
{
    int a[12] = {1,9,6,5,3,7,5,4,2,8,0,5};
    MergeSortNonR(a,12);
    return 0;
}
