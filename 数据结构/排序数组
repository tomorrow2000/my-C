void swap(int *arr1,int *arr2)
 {
     if(!arr1&&!arr2||(*arr1 == *arr2))
     {
         return;
     }
     *arr1 = *arr1^*arr2;
     *arr2 = *arr1^*arr2;
     *arr1 = *arr1^*arr2;
 }
/*insertsort
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    int i = 0;
    for(i = 0;i<numsSize;++i)
    {
        int end = i-1,val = nums[i];
        while(end>=0&&val<nums[end])
        {
            nums[end+1] = nums[end];
            --end;
        }
        nums[end+1]=val;
    }
    *returnSize = numsSize;
    return nums;
}*/
/*shellsort
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    int gap=numsSize,i = 0,val,end;
    while(gap>1)
    {
        gap = gap/2;
        for(i = 0;i <numsSize-gap;i++)
        {
            val = nums[i+gap];
            end = i;
            while(end>=0&&nums[end]>val)
            {
                nums[end+gap] = nums[end];
                end -=gap;
            }
            nums[end+gap] = val;
        }
    }
    *returnSize = numsSize;
    return nums;
}*/
/*selectsort
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    int mini = 0,maxi = 0,i = 0,start = 0,end = numsSize-1;
    while(start<end)
    {
        mini = start,maxi = end;
        for(i = start;i<=end;i++)
        {
            if(nums[i]>nums[maxi])
                maxi = i;
            if(nums[i]<nums[mini])
                mini = i;
        }
        if(start == maxi)
        {
            maxi = mini;
        }
        swap(&nums[start++],&nums[mini]);
        swap(&nums[end--],&nums[maxi]);
    }
    *returnSize = numsSize;
    return nums;
}*/
/*bubblesort
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    int i=0,j=0;
    *returnSize = numsSize;
    for(i=0;i<numsSize-1;--numsSize)
    {
        for(j=0;j<numsSize-1;++j)
        {
            if(nums[j]>nums[j+1])
                swap(&nums[j],&nums[j+1]);
        }
    }
    return nums;
}*/
/*heapsort
void adjustdown(int *nums, int numsSize,int root)
{
    if(!nums)
    {
        return;
    }
    int parent = root,child = 2*parent+1;
    while(child<numsSize)
    {
        if(child+1<numsSize && nums[child]<nums[child+1])
            child = child+1;
        if(nums[child]>nums[parent])
            swap(&nums[child],&nums[parent]);
        parent = child;
        child = 2*parent+1;
    }
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    int i = 0;
    *returnSize = numsSize;
    for(i=(numsSize-1)/2;i>=0;--i)
    {
        adjustdown(nums,numsSize,i);
    }
    while(numsSize)
    {
        swap(&nums[0],&nums[numsSize-1]);
        --numsSize;
        adjustdown(nums,numsSize,0);
    }
    return nums;
}*/
/*countsort
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    *returnSize = numsSize;
    int max = nums[0],min = nums[0],i = 0,j = 0;
    for(i = 0;i<numsSize;++i)
    {
        if(max<nums[i])
            max = nums[i];
        if(min>nums[i])
            min = nums[i];
    }
    int *temp = (int *)calloc(max-min+1,sizeof(int));
    for(i = 0;i<numsSize;++i)
    {
        temp[nums[i]-min]++;
    }
    j = 0;
    for(i = 0;i<max-min+1;++i)
    {
        while(temp[i]--)
        {
            nums[j] = i+min;
            ++j;
        }
    }
    free(temp);
    return nums;
}*/
/*quicksort
typedef struct Stack
{
    int top;
    int capacity;
    int *data;
}Stack;

void stackinit(Stack *stack)
{
    assert(stack);
    stack->top = 0,stack->capacity = 2;
    stack->data = (int *)malloc(stack->capacity*sizeof(int));
}
void stackdestroy(Stack *stack)
{
    assert(stack);
    free(stack->data);
    stack->data = NULL;
}
void stackpush(Stack *stack,int data)
{
    assert(stack);
    if(stack->top>=stack->capacity)
    {
        int *temp = (int *)realloc(stack->data,2*stack->capacity*sizeof(int));
        if(temp)
        {
            printf("succeed\n");
            stack->data = temp;
            stack->capacity *= 2;
        }else
        {
            printf("fail");
        }
    }
    stack->top++;
    stack->data[stack->top-1] = data;
}
void stackpop(Stack *stack)
{
    assert(stack);
    if(stack->top!=0)
    {
        --stack->top;
    }else
    {
        printf("fail");
    }
}
int stacktop(Stack *stack)
{
    assert(stack);
    if(stack->top!=0)
        return stack->data[stack->top-1];
    else
        exit(-1);
}
bool stackempty(Stack *stack)
{
    assert(stack);
    if(stack->top)
        return 0;
    else
        return 1;
}
int getmid(int* nums,int left,int right)
{
    int mid = (left+right)/2;
    if(nums[left]>nums[mid])
    {
        if(nums[mid]>nums[right])
            return mid;
        else if(nums[right]>nums[left])
            return left;
        else
            return right;
    }else
    {
        if(nums[left]>nums[right])
            return left;
        else if(nums[right]>nums[mid])
            return mid;
        else
            return right;
    }
}
//挖坑法
void partsort1(int* nums, int left, int right)
{
    if(left>=right)
        return;
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],pit = left,begin = left,end = right;
    while(begin<end)
    {
        while(begin<end&&key<=nums[end])
            --end;
        nums[pit] = nums[end];
        pit = end;
        while(begin<end&&key>=nums[begin])
            ++begin;
        nums[pit] = nums[begin];
        pit = begin;
    }
    nums[pit] = key;
    partsort1(nums,left,pit-1);
    partsort1(nums,pit+1,right);
}
//左右指针法
void partsort2(int* nums, int left, int right)
{
    if(left>=right)
        return;
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],begin = left,end = right;
    while(begin<end)
    {
        while(begin<end && key<=nums[end])
            --end;
        while(begin<end && key>=nums[begin])
            ++begin;
        swap(&nums[begin],&nums[end]);
    }
    swap(&nums[left],&nums[end]);
    partsort2(nums,left,end-1);
    partsort2(nums,end+1,right);
}
//前后指针法
void partsort3(int* nums, int left, int right)
{
    if(left>=right)
        return;
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],cur = left,prev = left;
    while(cur<=right)
    {
        if(nums[cur]<key)
        {
            ++prev;
            swap(&nums[cur],&nums[prev]);
        }
        ++cur;
    }
    swap(&nums[prev],&nums[left]);
    partsort3(nums,left,prev-1);
    partsort3(nums,prev+1,right);
}
//单趟排序4 5 6
int partsort4(int* nums, int left, int right)
{
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],pit = left,begin = left,end = right;
    while(begin<end)
    {
        while(begin<end&&key<=nums[end])
            --end;
        nums[pit] = nums[end];
        pit = end;
        while(begin<end&&key>=nums[begin])
            ++begin;
        nums[pit] = nums[begin];
        pit = begin;
    }
    nums[pit] = key;
    return pit;
}
int partsort5(int* nums, int left, int right)
{
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],begin = left,end = right;
    while(begin<end)
    {
        while(begin<end && key<=nums[end])
            --end;
        while(begin<end && key>=nums[begin])
            ++begin;
        swap(&nums[begin],&nums[end]);
    }
    swap(&nums[left],&nums[end]);
    return end;
}
int partsort6(int* nums, int left, int right)
{    
    int mid = getmid(nums,left,right);
    swap(&nums[left],&nums[mid]);
    int key =nums[left],cur = left,prev = left;
    while(cur<=right)
    {
        if(nums[cur]<key)
        {
            ++prev;
            swap(&nums[cur],&nums[prev]);
        }
        ++cur;
    }
    swap(&nums[prev],&nums[left]);
    return prev;
}
//非递归
void partsort(int* nums, int left, int right){
    Stack stack;
    stackinit(&stack);
    stackpush(&stack,right);
    stackpush(&stack,left);
    while(!stackempty(&stack))
    {
        left = stacktop(&stack);
        stackpop(&stack);
        right = stacktop(&stack);
        stackpop(&stack);
        int key = partsort4(nums,left,right);
        if(key+1<right)
        {
            stackpush(&stack,right);
            stackpush(&stack,key+1);
        }
        if(left<key-1)
        {
            stackpush(&stack,key-1);
            stackpush(&stack,left);
        }
    }
    stackdestroy(&stack);
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    *returnSize = numsSize;
    partsort(nums,0,numsSize-1);
    return nums;
}*/
/*mergesort*/
//非递归
void mergesort1(int* nums, int numsSize)
{
    int begin1 = 0,end1 = 0,begin2 = 0,end2 = 0,gap = 1,i = 0,j = 0;
    int *temp = (int *)malloc(numsSize*sizeof(int));
    while(gap<numsSize)
    {
        for(i = 0;i<numsSize;i+=2*gap)
        {
            begin1 = i,end1 = i+gap-1;
            begin2 = i+gap,end2 = i+2*gap-1;
            if(begin2>numsSize-1)
            {
                break;
            }
            if(end2>numsSize-1)
            {
                end2 = numsSize-1;
            }
            while(begin1<=end1&&begin2<=end2)
            {
                if(nums[begin1]<nums[begin2])
                    temp[j++] = nums[begin1++];
                else
                   temp[j++] = nums[begin2++];
            }
            while(begin1<=end1)
                temp[j++] = nums[begin1++];
            while(begin2<=end2)
                temp[j++] = nums[begin2++];
            for(j = i;j<=end2;j++)
            {
                nums[j]=temp[j];
            }
        }
        j = 0;
        gap*=2;
    }
    free(temp);
}
void mergesort2(int* nums, int left, int right)
{
    if(left>=right)
        return;
    int mid = (left+right)/2;
    mergesort2(nums,left,mid);
    mergesort2(nums,mid+1,right);
    int i = 0,begin1 = left,end1 = mid,begin2 = mid+1,end2 = right;
    int *temp = (int *)malloc((right-left+1)*sizeof(int));
    while(begin1<=end1&&begin2<=end2)
    {
        if(nums[begin1]<nums[begin2])
            temp[i++] = nums[begin1++];
        else
            temp[i++] = nums[begin2++];
    }
    while(begin1<=end1)
        temp[i++] = nums[begin1++];
    while(begin2<=end2)
        temp[i++] = nums[begin2++];
    for(i = 0;i<right-left+1;i++)
        nums[left+i] = temp[i];
}
int* sortArray(int* nums, int numsSize, int* returnSize){
    if(!nums)
    {
        *returnSize = 0;
        return nums;
    }
    if(numsSize == 0|| numsSize == 1)
    {
        *returnSize = numsSize;
        return nums;
    }
    *returnSize = numsSize;
    mergesort2(nums,0,numsSize-1);
    return nums;
}
