#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

// 支持动态增长的栈
typedef int STDataType;
typedef struct Stack
{
  STDataType* _a;
  int _top;   // 栈顶
  int _capacity; // 容量 
}Stack;
// 初始化栈 
void StackInit(Stack* ps)
{
  ps->_top = -1;
  ps->_capacity = 4;
  ps->_a = (STDataType *)malloc(ps->_capacity*sizeof(STDataType));
}
// 入栈 
void StackPush(Stack* ps, STDataType data)
{
  assert(ps);
  if(ps->_top +1== ps->_capacity)
  {
    STDataType *temp = (STDataType *)realloc(ps->_a,ps->_capacity*2*sizeof(STDataType));
    if(!temp)
    {
      printf("realloc fail");
      exit(-1);
    }
    ps->_capacity*=2;
    ps->_a=temp;
  }
  ++ps->_top;
  ps->_a[ps->_top] = data;
}
// 出栈 
void StackPop(Stack* ps)
{
  assert(ps);
  if(ps->_top == -1)
  {
    printf("pop fail");
    exit(-1);
  }
  --ps->_top;
}
// 获取栈顶元素 
STDataType StackTop(Stack* ps)
{
  assert(ps);
  if(ps->_top == -1)
  {
    printf("pop fail");
    exit(-1);
  }
  return ps->_a[ps->_top];
}
// 获取栈中有效元素个数 
int StackSize(Stack* ps)
{
  assert(ps);
  return ps->_top+1;
}
// 检测栈是否为空，如果为空返回非零结果，如果不为空返回0 
int StackEmpty(Stack* ps)
{
  if(ps->_top != -1)
    return 0;
  else
    return 1;
}
// 销毁栈 
void StackDestroy(Stack* ps)
{
  free(ps->_a);
  ps->_a = NULL;
}
